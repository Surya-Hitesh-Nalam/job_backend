// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(uuid())
  userName     String?          @unique @db.VarChar(255)
  email        String           @unique @db.VarChar(255)
  password     String           @db.VarChar(255)
  token        String?          @db.VarChar(255)
  isVerified   Boolean          @default(false)
  otp          String?          @db.VarChar(10)
  otpExpiry    DateTime?

  firstName    String?          @db.VarChar(255)
  lastName     String?          @db.VarChar(255)
  phoneNumber  String?          @db.VarChar(20)
  address      String?          @db.VarChar(255)
  fatherName   String?          @db.VarChar(255)
  motherName   String?          @db.VarChar(255)
  city         String?          @db.VarChar(100)
  state        String?          @db.VarChar(100)
  country      String?          @db.VarChar(100)
  profilePic   String?          @db.VarChar(500)
  resume       String?          @db.VarChar(500)

  role         Role             @default(USER)   

  education    Education[]
  applications JobApplication[]
  roundResults Results[]
}


model Education {
  id                String  @id @default(uuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  educationalLevel  String  @db.VarChar(50) // e.g., "10th", "12th", "B.Tech", etc.
  schoolOrCollege   String  @db.VarChar(255)
  specialization    String? @db.VarChar(255) // e.g., "Computer Science"
  boardOrUniversity String? @db.VarChar(255) // e.g., "CBSE", "State Board", "JNTU"
  percentage        Float
  passedOutYear     Int
  location          String? @db.VarChar(255)
}

model Job {
  id             String      @id @default(uuid())
  jobTitle       String   @db.VarChar(255)
  jobDescription String   @db.Text
  skillsRequired Json // e.g., ["React", "Node.js", "SQL"]
  location       String   @db.VarChar(255)
  salary         String?  @db.VarChar(100) // e.g., "10-12 LPA"
  experience     String?  @db.VarChar(100) // e.g., "0-2 years", "2+ years"
  jobRole        String?  @db.VarChar(100) // e.g., "Frontend Developer"
  jobType        String?  @db.VarChar(100) // e.g., "Full-Time", "Internship", "Remote"
  postedDate     DateTime @default(now())

  // Company details
  companyName    String           @db.VarChar(255)
  companyWebsite String?          @db.VarChar(255)
  companyLogo    String?          @db.VarChar(500)
  companyEmail   String?          @db.VarChar(255)
  companyPhone   String?          @db.VarChar(50)
  applications   JobApplication[] // Relation
  rounds      Round[]
  roundResults Results[] // Add this line to complete the relation

  // Extra fields (recommended)
  lastDateToApply DateTime?
}

enum Role {
  ADMIN
  USER
}

model JobApplication {
  id        String      @id @default(uuid())
  jobId     String
  userId    String
  resume    String?  @db.VarChar(500)
  status    String   @default("Pending")
  appliedAt DateTime @default(now())

  currentRound Int?   // New: tracks current round number or null if finished

  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Round {
  id          String   @id @default(uuid())
  jobId       String
  roundNumber Int
  roundName   String   @db.VarChar(100)
  description String?  @db.Text

  job     Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  results Results[]
}

model Results {
  id        String   @id @default(uuid())
  userId    String   // ✅ Fixed from Int to String
  jobId     String   // ✅ Fixed from Int to String
  roundId   String
  roundName String   @db.VarChar(100)
  status    String   @default("Qualified")
  timestamp DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  job   Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  round Round @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId, roundName]) // ✅ Optional but recommended
}


